// 자물쇠와 열쇠
import java.util.ArrayList;
class Solution {
    ArrayList<int[][]> keyList;
    int[][] paddingLock;
    int keyLen, lockLen;
    public boolean solution(int[][] key, int[][] lock) {
        keyLen = key.length;
        lockLen = lock.length;
        paddingLock = new int[lockLen + 2*keyLen -2][lockLen + 2*keyLen -2];
        keyList = new ArrayList<>();
        keyList.add(key);
        // key 회전
        for(int i = 0; i < 3; i++){
            keyList.add(keyRotation(keyList.get(i)));
        }
        
        // paddingLock 채우기
        for(int i = keyLen - 1; i < keyLen + lockLen - 1; i++){
            for(int j = keyLen-1; j < keyLen + lockLen - 1; j++){
                paddingLock[i][j] = lock[i-keyLen+1][j-keyLen+1];
            }
        }
        
        // 모든 영역 check
        for(int i = 0; i < lockLen + keyLen - 1; i++){
            for(int j = 0; j < lockLen + keyLen - 1; j++){
                if(canOpen(i,j))
                    return true;
            }
        }
        return false;
    }
    
    // 열 수 있나
    private boolean canOpen(int startR, int startC){
        int[][] temp = new int[paddingLock.length][paddingLock.length];
        // key마다 확인
        for(int[][] key : keyList){
            boolean flag = true;
            
            // paddingLock 복사
            for(int i = 0; i < paddingLock.length; i++){
                for(int j = 0; j < paddingLock.length; j++){
                    temp[i][j] = paddingLock[i][j];
                }
            }
            
            // key의 돌기와 lock의 홈이 일치하는지 확인. 돌기끼리 만나면 false.
            Check:
                for(int i = 0; i < keyLen; i++){
                    for(int j = 0; j < keyLen; j++){
                        if(key[i][j] == 1){
                            if(temp[startR + i][startC + j] == 0){ // key의 돌기 - lock의 홈
                                temp[startR + i][startC + j] = 1;
                            }else{ // key의 돌기 - lock의 돌기
                                flag = false;
                                break Check;
                            }
                        }
                    }
                }
            // key와 lock의 돌기끼리 만났다면 유효하지 않으니 continue.
            if(!flag) continue;
            
            // temp에서 홈이 모두 사라졌는지 확인
            Find:
                for(int i = keyLen-1; i < keyLen + lockLen - 1; i++){
                    for(int j = keyLen - 1; j < keyLen + lockLen - 1; j++){
                        if(temp[i][j] == 0){
                            flag = false;
                            break Find;
                        }
                    }
                }
            // 모든 홈이 사라졌다면
            if(flag)
                return true;
        }
        return false;
    }
    
    // key 90도 회전 결과 return
    private int[][] keyRotation(int[][] key){
        int[][] result = new int[keyLen][keyLen];
        for(int i = 0; i < keyLen; i++){
            for(int j = 0; j < keyLen; j++){
                result[i][j] = key[keyLen-1-j][i];
            }
        }
        return result;
    }
}