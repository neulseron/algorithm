// 기둥과 보

import java.util.ArrayList;
import java.util.Collections;
import java.util.Arrays;
class Solution {
    static boolean[][][] state; // x, y, type(0: 기둥, 1: 보)
    public int[][] solution(int n, int[][] build_frame) {
        state = new boolean[n+1][n+1][2];
        int[][] answer = {};
        int x, y, type, ir;
        boolean flag;
        ArrayList<Point> list = new ArrayList<>(); // 구조물 정보 저장
        
        // 구조물 동작 수행
        for(int[]b : build_frame){
            x = b[0];
            y = b[1];
            type = b[2]; // 기둥/보
            ir = b[3]; // 삭제/설치
            flag = true; // 삭제 여부 판단
            
            if(type == 1){ // 보
            
                if(ir == 1){ // 설치
                    // 아래/오른쪽 아래에 기둥 존재 or 양끝이 보 => 설치가능
                    if((isIn(x,y-1) && state[x][y-1][0]) || (isIn(x+1,y-1) && state[x+1][y-1][0]) || (isIn(x-1,y) && isIn(x+1,y) && state[x-1][y][1] && state[x+1][y][1])){ 
                        list.add(new Point(x,y,type));
                        state[x][y][type] = true;
                    }
                }else{ // 삭제
                    state[x][y][type] = false; // 삭제 처리
                    
                    if(state[x][y][0]){ // 현 위치 기둥 1) 왼쪽이 보 2) 아래가 기둥
                        if(!checkCol(x,y))
                            flag = false;
                    }
                    
                    if(isIn(x+1,y) && state[x+1][y][0]){ // 오른쪽이 기둥일때 1) 오른쪽 보 2) 오른쪽 아래 기둥
                        if(!checkCol(x+1,y))
                            flag = false;
                    }
                    
                    if(isIn(x-1,y) && state[x-1][y][1]){ // 왼쪽이 보일때 1) 왼쪽 아래 기둥 2) 현 위치 아래 기둥
                        if(!checkBeam(x-1,y)){
                            flag = false;
                        }
                    }
                    
                    if(isIn(x+1,y) && state[x+1][y][1]){ // 오른쪽이 보일때 1) 오른쪽 아래 기둥 2) 오른쪽의 오른쪽 아래 기둥
                        if(!checkBeam(x+1,y)){
                            flag = false;
                        }
                    }
                    
                    if(flag){ // 삭제 가능
                        for(int j = 0; j < list.size(); j++){
                            if(list.get(j).x == x && list.get(j).y == y && list.get(j).type == type)
                                list.remove(j);
                        }
                    }else{ // 삭제 불가능. 되돌리기.
                        state[x][y][type] = true;
                    }
                }
            }else{ // 기둥
            
                if(ir == 1){ // 설치
                    if(y==0 || state[x][y][1] || (isIn(x,y-1) && state[x][y-1][0]) || (isIn(x-1,y) && state[x-1][y][1])){ // 바닥 위 or 현위치 위 보 or 다른 기둥 위 or 왼쪽 보
                        list.add(new Point(x,y,type));
                        state[x][y][type] = true;
                    }
                }else{ // 삭제
                    state[x][y][type] = false; // 삭제 처리
                    
                    if(isIn(x-1,y+1) && state[x-1][y+1][1]){ // 왼쪽 위 보 1) 왼쪽 기둥 2) 왼쪽의 왼쪽 위 보 & 현위치 위 보
                        if(!checkBeam(x-1,y+1)){
                            flag = false;
                        }
                    }
                    
                    if(isIn(x,y+1) && state[x][y+1][0]){ // 현위치 위 기둥 1) 현위치 위 보 2) 왼쪽 위 보
                        if(!checkCol(x,y+1)){
                            flag = false;
                        }
                    }
                    
                    if(isIn(x,y+1) && state[x][y+1][1]){ // 현위치 위 보 1) 오른쪽 기둥 2) 왼쪽위 보 & 오른쪽 위 보
                        if(!checkBeam(x,y+1)){
                            flag = false;
                        }
                    }
                    
                    if(flag){ // 삭제 가능
                        for(int j = 0; j < list.size(); j++){
                            if(list.get(j).x == x && list.get(j).y == y && list.get(j).type == type)
                                list.remove(j);
                        }
                    }else{ // 삭제 불가능. 되돌리기
                        state[x][y][type] = true;
                    }
                }
            }
        }
        // 정해진 기준대로 정렬
        Collections.sort(list);
        // 정답 배열에 저장
        answer = new int[list.size()][3];
        for(int i = 0; i < list.size(); i++){
            answer[i][0] = list.get(i).x;
            answer[i][1] = list.get(i).y;
            answer[i][2] = list.get(i).type;
        }
        return answer;
    }
    
    // 전달받은 위치의 보가 유효한지 확인
    private static boolean checkBeam(int x, int y){
        // type = 1 (보)
        if(isIn(x,y-1) && state[x][y-1][0]) return true; // 현 위치 아래 기둥
        if(isIn(x+1,y-1) && state[x+1][y-1][0]) return true; // 현 위치 오른쪽 아래 기둥
        if(isIn(x-1,y) && isIn(x+1,y) && state[x-1][y][1] && state[x+1][y][1]) return true; // 양 옆이 보
        return false;
    }
    
    // 전달받은 위치의 기둥이 유효한지 확인
    private static boolean checkCol(int x, int y){
        // type = 0 (기둥)
        if(y==0) return true; // 바닥이면
        if(state[x][y][1]) return true; // 현위치 보
        if(isIn(x-1,y) && state[x-1][y][1]) return true; // 왼쪽에 보
        if(isIn(x,y-1) && state[x][y-1][0]) return true; // 현위치 아래 기둥
        return false;
    }
    
    // 범위 체크
    private static boolean isIn(int x, int y){
        if(0<=x && x < state.length && 0<=y && y < state.length) return true;
        return false;
    }
    
    // 좌표와 기둥/보 타입 관리 객체
    static class Point implements Comparable<Point>{
        int x, y, type;
        public Point(int x, int y, int type){
            this.x = x;
            this.y = y;
            this.type = type;
        }
        
        // 정렬기준에 맞게 설정
        @Override
        public int compareTo(Point o1){
            if(this.x == o1.x){
                if(this.y == o1.y){
                    return this.type-o1.type;
                }else
                    return this.y-o1.y;
            }else{
                return this.x-o1.x;
            }
        }
    }
}